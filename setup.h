#ifndef _8085_CPU_H_
#define _8085_CPU_H_
#include <cstdint>
#include<iostream>
#include<queue>
#include<vector>
using namespace std;
#include "memory.h"

class CPU{
public:
    uint8_t A, B, C, D, E, H, L,F;
    uint16_t PC, SP;
    bool sign, zero, aux_carry, parity, carry;
    memory obj;
    uint16_t end;
    queue<uint16_t> bp;
    CPU(vector<string> s,uint16_t start)
    {
        obj.x=start;
        obj.fins(s);
        end=obj.x;
        A=0;
        B=0;
        C=0;
        D=0;
        E=0;
        H=0;
        L=0;
        F=0;
        PC=start;
        SP=0;
        sign=false;
        zero=false;
        aux_carry=false;
        carry=false;
        parity=false;
    }
    // Flags
    // Execute the next instruction
    bool parity_check(uint8_t);
    void add_req(uint8_t*,uint16_t);
    void sub_req(uint8_t*);
    void logic_ana_req();
    void logic_xra_req();
    void execute();
    void initialize_instruction_table();
    void debug(uint16_t);
    void CPU_state();
    void add_c();
    void add_a();
    void add_d();
    void add_b();
    void add_e();
    void add_h();
    void add_l();
    void add_m();
    void daa();
    void dad_b();
    void dad_d();
    void dad_h();
    void dad_sp();
    void adc_a();
    void adc_b();
    void adc_c();
    void adc_d();
    void adc_e();
    void adc_h();
    void adc_l();
    void adc_m();
    void sub_c();
    void sub_a();
    void sub_d();
    void sub_b();
    void sub_e();
    void sub_h();
    void sub_l();
    void sub_m();
    void sbb_c();
    void sbb_a();
    void sbb_d();
    void sbb_b();
    void sbb_e();
    void sbb_h();
    void sbb_l();
    void sbb_m();
    void ana_c();
    void ana_a();
    void ana_d();
    void ana_b();
    void ana_e();
    void ana_h();
    void ana_l();
    void ana_m();
    void xra_c();
    void xra_a();
    void xra_d();
    void xra_b();
    void xra_e();
    void xra_h();
    void xra_l();
    void xra_m();
    void ora_c();
    void ora_a();
    void ora_d();
    void ora_b();
    void ora_e();
    void ora_h();
    void ora_l();
    void ora_m();
    void cmp_c();
    void cmp_a();
    void cmp_d();
    void cmp_b();
    void cmp_e();
    void cmp_h();
    void cmp_l();
    void cmp_m();
    void cma();
    void cmc();
    void jmp();
    void jz();
    void jnz();
    void jc();
    void jnc();
    void jm();
    void jp();
    void adi();
    void aci();
    void xri();
    void ani();
    void ori();
    void cpi();
    void sbi();
    void sui();
    void mov_ab();
    void mov_ac();
    void mov_ad();
    void mov_ae();
    void mov_ah();
    void mov_al();
    void mov_ba();
    void mov_bc();
    void mov_bd();
    void mov_be();
    void mov_bh();
    void mov_bl();
    void mov_ca();
    void mov_cb();
    void mov_cd();
    void mov_ce();
    void mov_ch();
    void mov_cl();
    void mov_da();
    void mov_db();
    void mov_dc();
    void mov_de();
    void mov_dh();
    void mov_dl();
    void mov_ea();
    void mov_eb();
    void mov_ec();
    void mov_ed();
    void mov_eh();
    void mov_el();
    void mov_ha();
    void mov_hb();
    void mov_hc();
    void mov_hd();
    void mov_he();
    void mov_hl();
    void mov_la();
    void mov_lb();
    void mov_lc();
    void mov_ld();
    void mov_le();
    void mov_lh();
    void mov_am();
    void mov_bm();
    void mov_cm();
    void mov_dm();
    void mov_em();
    void mov_hm();
    void mov_lm();
    void mov_ma();
    void mov_mb();
    void mov_mc();
    void mov_md();
    void mov_me();
    void mov_mh();
    void mov_ml();

    //immediate
    void mvi_a();
    void mvi_b();
    void mvi_c();
    void mvi_d();
    void mvi_e();
    void mvi_h();
    void mvi_l();
    void mvi_m();
    void lhld();
    void shld();
    void lda();
    void sta();
    void lxi_b();
    void lxi_d();
    void lxi_h();
    void lxi_sp();
    void ldax_b();
    void ldax_d();
    void stax_b();
    void stax_d();
    void xchg();

    void inr_b();
    void inr_c();
    void inr_d();
    void inr_e();
    void inr_h();
    void inr_l();
    void inr_m();
    void inr_a();
    void inx_b();
    void inx_d();
    void inx_h();
    void inx_sp();

    void dcr_b();
    void dcr_c();
    void dcr_d();
    void dcr_e();
    void dcr_h();
    void dcr_l();
    void dcr_m();
    void dcr_a();
    void dcx_b();
    void dcx_d();
    void dcx_h();
    void dcx_sp();
    
    void rlc();
    void rrc();
    void rar();
    void ral();

    void subr_init();
    void call();
    void cc();
    void cnc();
    void cz();
    void cnz();
    void cp();
    void cm();
    void cpe();
    void cpo();
    void ret();
    void rc();
    void rnc();
    void rz();
    void rnz();
    void rp();
    void rm();
    void rpe();
    void rpo();

    void push_b();
    void push_d();
    void push_h();
    void push_psw();
    void pop_b();
    void pop_d();
    void pop_h();
    void pop_psw();
    void xthl();
    void pchl();
    void sphl();

};

#endif /* _8085_CPU_H_ */